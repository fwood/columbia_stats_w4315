# Redundant mean parameters for a simple nested model: first model

model {
  for (i in 1:n){
    y[i] ~ dnorm (y.hat[i], tau.y)
    y.hat[i] <- mu + eta[county[i]] 
  }
  mu ~ dnorm (0, .0001)
  tau.y <- pow(sigma.y, -2)
  sigma.y ~ dunif (0, 100)

  for (j in 1:n.county){
    eta[j] ~ dnorm (0, tau.eta)
  }
  tau.eta <- pow(sigma.eta, -2)
  sigma.eta ~ dunif (0, 100)
}

#############################################################################

# Redundant mean parameters for a simple nested model: faster model
# (same as in file M4.bug)

model {
  for (i in 1:n){
    y[i] ~ dnorm (y.hat[i], tau.y)
    y.hat[i] <- mu + eta[county[i]] 
  }
  mu ~ dnorm (0, .0001)
  tau.y <- pow(sigma.y, -2)
  sigma.y ~ dunif (0, 100)
  mu.adj <- mu + mean(eta[])
  for (j in 1:J){
    eta[j] ~ dnorm (mu.eta, tau.eta)
    eta.adj[j] <- eta[j] - mean(eta[])
  }
  mu.eta ~ dnorm (0, .0001)
  tau.eta <- pow(sigma.eta, -2)
  sigma.eta ~ dunif (0, 100)
}

#############################################################################

# Redundant mean parameters for non-nested model: flight simulator example

model {
  for (i in 1:n){
    y[i] ~ dnorm (y.hat[i], tau.y)
    y.hat[i] <- mu + g[treatment[i]] + d[airport[i]]
  }
  mu.adj <- mu + mean(g[]) + mean(d[])
  mu ~ dnorm (0, .0001)
  tau.y <- pow(sigma.y, -2)
  sigma.y ~ dunif (0, 100)

  for (j in 1:n.treatment){
    g[j] ~ dnorm (mu.g, tau.g)
    g.adj[j] <- g[j] - mean(g[])
  }
  mu.g ~ dnorm (0, .0001)
  tau.g <- pow(sigma.g, -2)
  sigma.g ~ dunif (0, 100)

  for (k in 1:n.airport){
    d[k] ~ dnorm (mu.d, tau.d)
    d.adj[k] <- d[k] - mean(d[])
  }
  mu.d ~ dnorm (0, .0001)
  tau.d <- pow(sigma.d, -2)
  sigma.d ~ dunif (0, 100)
}


#############################################################################

# Multilevel logistic regression: survey responses example

model {
  for (i in 1:n){
    y[i] ~ dbin (p.bound[i], 1)
    p.bound[i] <- max(0, min(1, p[i]))
    logit(p[i]) <- Xbeta[i]
    Xbeta[i] <- b.0 + b.female*female[i] + b.black*black[i] +
      b.female.black*female[i]*black[i] +
      b.age[age[i]] + b.edu[edu[i]] + b.age.edu[age[i],edu[i]] +
      b.state[state[i]]
  }
  b.0 ~ dnorm (0, .0001)
  b.female ~ dnorm (0, .0001)
  b.black ~ dnorm (0, .0001)
  b.female.black ~ dnorm (0, .0001)
  
  mu ~ dnorm (0, .0001)
  mu.adj <- b.0 + mean(b.age[]) + mean(b.edu[]) + mean(b.age.edu[,]) +
     mean(b.state[])

  for (j in 1:n.age){
    b.age[j] ~ dnorm(mu.age, tau.age)
    b.age.adj[j] <- b.age[j] - mean(b.age[])
  }
  for (j in 1:n.edu){
    b.edu[j] ~ dnorm(mu.edu, tau.edu)
    b.edu.adj[j] <- b.edu[j] - mean(b.edu[])
  }
  for (j in 1:n.age){
    for (k in 1:n.edu){
    b.age.edu[j,k] ~ dnorm(mu.age.edu, tau.age.edu)
    b.age.edu.adj[j,k] <- b.age.edu[j,k] - mean(b.age.edu[,])
    }
  }
  for (j in 1:n.state){
    b.state[j] ~ dnorm(b.state.hat[j], tau.state)
    b.state.hat[j] <- b.region[region[j]] + b.v.prev*v.prev[j]
  }
  b.v.prev ~ dnorm(0, .0001)
  for (j in 1:n.region){
  b.region[j] ~ dnorm (mu.region, tau.region)
  b.region.adj[j] <- b.region[j] - mean(b.region[])
  }
  mu.age ~ dnorm (0, .0001)
  mu.edu ~ dnorm (0, .0001)
  mu.age.edu ~ dnorm (0, .0001)
  mu.region ~ dnorm (0, .0001)

  tau.age <- pow(sigma.age, -2)
  tau.edu <- pow(sigma.edu, -2)
  tau.age.edu <- pow(sigma.age.edu, -2)
  tau.state <- pow(sigma.state, -2)
  tau.region <- pow(sigma.region, -2)

  sigma.age ~ dunif (0, 100)
  sigma.edu ~ dunif (0, 100)
  sigma.age.edu ~ dunif (0, 100)
  sigma.state ~ dunif (0, 100)
  sigma.region ~ dunif (0, 100)
}





